# name: Terraform CI/CD with OIDC

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main

# permissions:
#   id-token: write
#   contents: read

# jobs:
#   terraform-plan:
#     runs-on: ubuntu-latest

#     # env:
#     #   # TF_WORKING_DIR: ./terraform
#     #   CACHE_KEY: ${{ github.runner.os }}-terraform-${{ hashFiles('**/*.tf*') }}

#     steps:
#       - name: 'Az CLI login'
#         uses: azure/login@v1
#         with:
#           client-id: ${{ secrets.AZURE_CLIENT_ID }}
#           tenant-id: ${{ secrets.AZURE_TENANT_ID }}
#           subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

#       - name: Checkout Code
#         uses: actions/checkout@v4

#       - name: "tfrm : install"
#         uses: hashicorp/setup-terraform@v3

#       - name: "github : cache"
#         uses: actions/cache@v3
#         with:
#           path: |
#             ${{ github.workspace }}/terraform
#           key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf*') }}
#           restore-keys: |
#             ${{ runner.os }}-terraform-

#       - name: "tfrm : fmt"
#         id: fmt
#         working-directory: ${{ github.workspace }}/terraform
#         run: terraform fmt -check
#         continue-on-error: true

#       - name: "tfrm : init"
#         id: init
#         working-directory: ${{ github.workspace }}/terraform
#         run: terraform init -backend=false

#       # - name: Terraform Workspace ##
#       #   run: terraform workspace select -or-create sandbox ##

#       - name: "tfrm : validate"
#         id: validate
#         working-directory: ${{ github.workspace }}/terraform
#         run: terraform validate -no-color

#       - name: "tfrm : plan"
#         id: plan
#         working-directory: ${{ github.workspace }}/terraform
#         run: terraform plan -no-color -out=tfplan
  
#   terraform-apply:
#     runs-on: ubuntu-latest
#     needs: terraform-plan
#     steps:
      
#       - name: Checkout Code
#         uses: actions/checkout@v4
      
#       - name: "tfrm : install"
#         uses: hashicorp/setup-terraform@v3

#       - name: "github : cache"
#         uses: actions/cache@v3
#         with:
#           path: |
#             ${{ github.workspace }}/terraform
#           key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf*') }}
#           restore-keys: |
#             ${{ runner.os }}-terraform-
      
#       - name: "tfrm : apply"
#         id: apply
#         working-directory: ${{ github.workspace }}/terraform
#         run: terraform apply -no-color --auto-approve

name: Terraform CI/CD with OIDC

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  terraform-plan:
    runs-on: ubuntu-latest

    env:
      TF_WORKING_DIR: ./terraform
      CACHE_KEY: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf*') }}

    steps:
      - name: Azure CLI login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Cache Terraform state and dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.TF_WORKING_DIR }}/.terraform
            ${{ env.TF_WORKING_DIR }}/.terraform.lock.hcl
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf*') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Terraform Format Check
        id: fmt
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform fmt -check
        continue-on-error: true

      - name: Initialize Terraform
        id: init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      - name: Terraform Validate
        id: validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -no-color -out=tfplan

      - name: Upload Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: ${{ env.TF_WORKING_DIR }}/tfplan

  terraform-apply:
    runs-on: ubuntu-latest
    needs: terraform-plan

    env:
      TF_WORKING_DIR: ./terraform
      CACHE_KEY: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf*') }}

    steps:
      - name: Azure CLI login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Cache Terraform state and dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.TF_WORKING_DIR }}/.terraform
            ${{ env.TF_WORKING_DIR }}/.terraform.lock.hcl
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf*') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Download Plan
        uses: actions/download-artifact@v3
        with:
          name: tfplan
          path: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Apply
        id: apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -no-color --auto-approve ${{ env.TF_WORKING_DIR }}/tfplan
